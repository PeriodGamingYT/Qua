# Versioning
	Versioning Format: 
		<Dev-Channel> <Release>.<MinorFix>.<HotFix>

  Versioning Part Formats:
    <Dev-Channel>:
      ("Pre-" / " " / "Post-") ("Alpha" / "Beta" / "Release")

    <Release>
      (Release #, n-digits)

    <MinorFix>
      (Minor Fix #, 2-digits)

    <HotFix>
      (Hot Fix #, 4-digits)

    (
      If something overflows, it will go to the next part.
      Eg:
        (<MinorFix>.<HotFix>)
        34.9999 -> 35.0000
    )
	
	Example:
		Beta 13.09.0039

	Architecture Version:
		Pre-Alpha 0.01.0002
	

# QS Communication structure.
Legend:
	QS = Qua Station

NOTE: The root QS is the server.

Example:
	QS -\
  	  |- QS -\
	QS -/      |- QS -|- QS <-- (This is the root, and is displayed to the user.)
             /      /
	QS -------/      /
                  /
	QS ------------/

# Vector2 Properties.
  Vector2:
    int x
    int y

  Vector2 Interface Functions:
    vector2Add(Vector2 a, vector2 b)
    vector2Sub(vector2 a, vector2 b)
    vector2Mul(vector2 a, vector2 b)
    vector2Div(vector2 a, vector2 b)
    vector2Default()
    
    (
      let a : Vector2 = Vector2 {
        x : 9,
        y : 9
      };
      
      let mut b : Vector2 = Vector2::default();
      b.x = 10;
      b.y = 10;
      
      let c : Vector2 = a.add(b);
    )

# QS Properties.
Legend:
	Empty = NULL (C/C++) / Err() (Rust) / nullptr (C++)

QS:
	Vector2 size
	Vector2 offset
	QS children[]
	QS parent <-- (Empty if parent.)

QS Interface Functions (Use snake case in Rust, and camel case in C & C++):
  (In Rust use impl without the "qs" part, case normally.)
	qsDisplay(QS qs)
	qsDraw(QS qs, QDC qDrawCommand)
	qsAdd(QS qs, QS newQs)
	qsRemove(QS qs) <-- (Removing current displayed QS (almost always root) stops Qua.)
	qsDefault() <-- (Use for this is (Eg. in C/C++): QS *qs = qsDefault())
	
	(
	  Rust Interface Function Example:
      let mut root : QS = QS::default();
      root.display();
      
      let child : QS = QS::default();
      root.add(&child);
      child.draw(QDC::Default());
      
      // Wait for user to input anything before stopping Qua.
      let mut buffer = String::new();
      std::io::stdin().read_line(&mut line).unwrap();
      root.remove();
	)

# QDC Properties.
  QDC:
    Vector2 start
    string newText <-- ("\n" goes down one line but x = start.x.)
  
  (WIP.)

# Implentation Recommendations.
Prefered language (Sorted by top pick -> bottom pick):
	Rust <-- (Lanugage for offical implementation.)
	C++
	C
	
